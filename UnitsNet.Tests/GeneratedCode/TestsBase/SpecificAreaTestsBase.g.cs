//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificArea.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificAreaTestsBase
    {
        protected abstract double SquareFootPerTonsInOneSquareFootPerTon { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double SquareFootPerTonsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificArea((double)0.0, SpecificAreaUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new SpecificArea();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpecificAreaUnit.SquareFootPerTon, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificArea(double.PositiveInfinity, SpecificAreaUnit.SquareFootPerTon));
            Assert.Throws<ArgumentException>(() => new SpecificArea(double.NegativeInfinity, SpecificAreaUnit.SquareFootPerTon));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificArea(double.NaN, SpecificAreaUnit.SquareFootPerTon));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new SpecificArea(value: 1.0, unitSystem: null));
        }

        [Fact]
        public void SpecificArea_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new SpecificArea(1, SpecificAreaUnit.SquareFootPerTon);

            QuantityInfo<SpecificAreaUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(SpecificArea.Zero, quantityInfo.Zero);
            Assert.Equal("SpecificArea", quantityInfo.Name);
            Assert.Equal(QuantityType.SpecificArea, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<SpecificAreaUnit>().Except(new[] {SpecificAreaUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void SquareFootPerTonToSpecificAreaUnits()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            AssertEx.EqualTolerance(SquareFootPerTonsInOneSquareFootPerTon, squarefootperton.SquareFootPerTons, SquareFootPerTonsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = SpecificArea.From(1, SpecificAreaUnit.SquareFootPerTon);
            AssertEx.EqualTolerance(1, quantity00.SquareFootPerTons, SquareFootPerTonsTolerance);
            Assert.Equal(SpecificAreaUnit.SquareFootPerTon, quantity00.Unit);

        }

        [Fact]
        public void FromSquareFootPerTons_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificArea.FromSquareFootPerTons(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificArea.FromSquareFootPerTons(double.NegativeInfinity));
        }

        [Fact]
        public void FromSquareFootPerTons_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificArea.FromSquareFootPerTons(double.NaN));
        }

        [Fact]
        public void As()
        {
            var squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            AssertEx.EqualTolerance(SquareFootPerTonsInOneSquareFootPerTon, squarefootperton.As(SpecificAreaUnit.SquareFootPerTon), SquareFootPerTonsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var squarefootperton = SpecificArea.FromSquareFootPerTons(1);

            var squarefootpertonQuantity = squarefootperton.ToUnit(SpecificAreaUnit.SquareFootPerTon);
            AssertEx.EqualTolerance(SquareFootPerTonsInOneSquareFootPerTon, (double)squarefootpertonQuantity.Value, SquareFootPerTonsTolerance);
            Assert.Equal(SpecificAreaUnit.SquareFootPerTon, squarefootpertonQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            AssertEx.EqualTolerance(1, SpecificArea.FromSquareFootPerTons(squarefootperton.SquareFootPerTons).SquareFootPerTons, SquareFootPerTonsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificArea v = SpecificArea.FromSquareFootPerTons(1);
            AssertEx.EqualTolerance(-1, -v.SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(2, (SpecificArea.FromSquareFootPerTons(3)-v).SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(2, (v + v).SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(10, (v*10).SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(10, (10*v).SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(2, (SpecificArea.FromSquareFootPerTons(10)/5).SquareFootPerTons, SquareFootPerTonsTolerance);
            AssertEx.EqualTolerance(2, SpecificArea.FromSquareFootPerTons(10)/SpecificArea.FromSquareFootPerTons(5), SquareFootPerTonsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificArea oneSquareFootPerTon = SpecificArea.FromSquareFootPerTons(1);
            SpecificArea twoSquareFootPerTons = SpecificArea.FromSquareFootPerTons(2);

            Assert.True(oneSquareFootPerTon < twoSquareFootPerTons);
            Assert.True(oneSquareFootPerTon <= twoSquareFootPerTons);
            Assert.True(twoSquareFootPerTons > oneSquareFootPerTon);
            Assert.True(twoSquareFootPerTons >= oneSquareFootPerTon);

            Assert.False(oneSquareFootPerTon > twoSquareFootPerTons);
            Assert.False(oneSquareFootPerTon >= twoSquareFootPerTons);
            Assert.False(twoSquareFootPerTons < oneSquareFootPerTon);
            Assert.False(twoSquareFootPerTons <= oneSquareFootPerTon);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            Assert.Equal(0, squarefootperton.CompareTo(squarefootperton));
            Assert.True(squarefootperton.CompareTo(SpecificArea.Zero) > 0);
            Assert.True(SpecificArea.Zero.CompareTo(squarefootperton) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            Assert.Throws<ArgumentException>(() => squarefootperton.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            Assert.Throws<ArgumentNullException>(() => squarefootperton.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificArea.FromSquareFootPerTons(1);
            var b = SpecificArea.FromSquareFootPerTons(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = SpecificArea.FromSquareFootPerTons(1);
            var b = SpecificArea.FromSquareFootPerTons(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = SpecificArea.FromSquareFootPerTons(1);
            object b = SpecificArea.FromSquareFootPerTons(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = SpecificArea.FromSquareFootPerTons(1);
            Assert.True(v.Equals(SpecificArea.FromSquareFootPerTons(1), SquareFootPerTonsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificArea.Zero, SquareFootPerTonsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = SpecificArea.FromSquareFootPerTons(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(SpecificArea.FromSquareFootPerTons(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            Assert.False(squarefootperton.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificArea squarefootperton = SpecificArea.FromSquareFootPerTons(1);
            Assert.False(squarefootperton.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificAreaUnit.Undefined, SpecificArea.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificAreaUnit)).Cast<SpecificAreaUnit>();
            foreach(var unit in units)
            {
                if(unit == SpecificAreaUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificArea.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 ft²/ton", new SpecificArea(1, SpecificAreaUnit.SquareFootPerTon).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 ft²/ton", new SpecificArea(1, SpecificAreaUnit.SquareFootPerTon).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s1"));
                Assert.Equal("0.12 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s2"));
                Assert.Equal("0.123 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s3"));
                Assert.Equal("0.1235 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s1", culture));
            Assert.Equal("0.12 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s2", culture));
            Assert.Equal("0.123 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s3", culture));
            Assert.Equal("0.1235 ft²/ton", new SpecificArea(0.123456, SpecificAreaUnit.SquareFootPerTon).ToString("s4", culture));
        }

        #pragma warning disable 612, 618

        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }

        #pragma warning restore 612, 618

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(SpecificArea)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(SpecificAreaUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(QuantityType.SpecificArea, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(SpecificArea.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = SpecificArea.FromSquareFootPerTons(1.0);
            Assert.Equal(new {SpecificArea.QuantityType, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = SpecificArea.FromSquareFootPerTons(value);
            Assert.Equal(SpecificArea.FromSquareFootPerTons(-value), -quantity);
        }

    }
}
