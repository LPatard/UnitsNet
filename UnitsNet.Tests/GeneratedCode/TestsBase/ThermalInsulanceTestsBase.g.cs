//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ThermalInsulance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ThermalInsulanceTestsBase
    {
        protected abstract double SquareMeterCelciusDegreePerKilowattsInOneSquareMeterCelciusDegreePerKilowatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double SquareMeterCelciusDegreePerKilowattsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ThermalInsulance((double)0.0, ThermalInsulanceUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ThermalInsulance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ThermalInsulance(double.PositiveInfinity, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt));
            Assert.Throws<ArgumentException>(() => new ThermalInsulance(double.NegativeInfinity, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ThermalInsulance(double.NaN, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ThermalInsulance(value: 1.0, unitSystem: null));
        }

        [Fact]
        public void ThermalInsulance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ThermalInsulance(1, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt);

            QuantityInfo<ThermalInsulanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ThermalInsulance.Zero, quantityInfo.Zero);
            Assert.Equal("ThermalInsulance", quantityInfo.Name);
            Assert.Equal(QuantityType.ThermalInsulance, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<ThermalInsulanceUnit>().Except(new[] {ThermalInsulanceUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void SquareMeterCelciusDegreePerKilowattToThermalInsulanceUnits()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            AssertEx.EqualTolerance(SquareMeterCelciusDegreePerKilowattsInOneSquareMeterCelciusDegreePerKilowatt, squaremetercelciusdegreeperkilowatt.SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ThermalInsulance.From(1, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt);
            AssertEx.EqualTolerance(1, quantity00.SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            Assert.Equal(ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt, quantity00.Unit);

        }

        [Fact]
        public void FromSquareMeterCelciusDegreePerKilowatts_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(double.NegativeInfinity));
        }

        [Fact]
        public void FromSquareMeterCelciusDegreePerKilowatts_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(double.NaN));
        }

        [Fact]
        public void As()
        {
            var squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            AssertEx.EqualTolerance(SquareMeterCelciusDegreePerKilowattsInOneSquareMeterCelciusDegreePerKilowatt, squaremetercelciusdegreeperkilowatt.As(ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt), SquareMeterCelciusDegreePerKilowattsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);

            var squaremetercelciusdegreeperkilowattQuantity = squaremetercelciusdegreeperkilowatt.ToUnit(ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt);
            AssertEx.EqualTolerance(SquareMeterCelciusDegreePerKilowattsInOneSquareMeterCelciusDegreePerKilowatt, (double)squaremetercelciusdegreeperkilowattQuantity.Value, SquareMeterCelciusDegreePerKilowattsTolerance);
            Assert.Equal(ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt, squaremetercelciusdegreeperkilowattQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            AssertEx.EqualTolerance(1, ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(squaremetercelciusdegreeperkilowatt.SquareMeterCelciusDegreePerKilowatts).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ThermalInsulance v = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            AssertEx.EqualTolerance(-1, -v.SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(2, (ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(3)-v).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(2, (v + v).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(10, (v*10).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(10, (10*v).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(2, (ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(10)/5).SquareMeterCelciusDegreePerKilowatts, SquareMeterCelciusDegreePerKilowattsTolerance);
            AssertEx.EqualTolerance(2, ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(10)/ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(5), SquareMeterCelciusDegreePerKilowattsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ThermalInsulance oneSquareMeterCelciusDegreePerKilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            ThermalInsulance twoSquareMeterCelciusDegreePerKilowatts = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(2);

            Assert.True(oneSquareMeterCelciusDegreePerKilowatt < twoSquareMeterCelciusDegreePerKilowatts);
            Assert.True(oneSquareMeterCelciusDegreePerKilowatt <= twoSquareMeterCelciusDegreePerKilowatts);
            Assert.True(twoSquareMeterCelciusDegreePerKilowatts > oneSquareMeterCelciusDegreePerKilowatt);
            Assert.True(twoSquareMeterCelciusDegreePerKilowatts >= oneSquareMeterCelciusDegreePerKilowatt);

            Assert.False(oneSquareMeterCelciusDegreePerKilowatt > twoSquareMeterCelciusDegreePerKilowatts);
            Assert.False(oneSquareMeterCelciusDegreePerKilowatt >= twoSquareMeterCelciusDegreePerKilowatts);
            Assert.False(twoSquareMeterCelciusDegreePerKilowatts < oneSquareMeterCelciusDegreePerKilowatt);
            Assert.False(twoSquareMeterCelciusDegreePerKilowatts <= oneSquareMeterCelciusDegreePerKilowatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.Equal(0, squaremetercelciusdegreeperkilowatt.CompareTo(squaremetercelciusdegreeperkilowatt));
            Assert.True(squaremetercelciusdegreeperkilowatt.CompareTo(ThermalInsulance.Zero) > 0);
            Assert.True(ThermalInsulance.Zero.CompareTo(squaremetercelciusdegreeperkilowatt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.Throws<ArgumentException>(() => squaremetercelciusdegreeperkilowatt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.Throws<ArgumentNullException>(() => squaremetercelciusdegreeperkilowatt.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            var b = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            var b = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            object b = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.True(v.Equals(ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1), SquareMeterCelciusDegreePerKilowattsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ThermalInsulance.Zero, SquareMeterCelciusDegreePerKilowattsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.False(squaremetercelciusdegreeperkilowatt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ThermalInsulance squaremetercelciusdegreeperkilowatt = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1);
            Assert.False(squaremetercelciusdegreeperkilowatt.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ThermalInsulanceUnit.Undefined, ThermalInsulance.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ThermalInsulanceUnit)).Cast<ThermalInsulanceUnit>();
            foreach(var unit in units)
            {
                if(unit == ThermalInsulanceUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ThermalInsulance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 m².°C/kW", new ThermalInsulance(1, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 m².°C/kW", new ThermalInsulance(1, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s1"));
                Assert.Equal("0.12 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s2"));
                Assert.Equal("0.123 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s3"));
                Assert.Equal("0.1235 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s1", culture));
            Assert.Equal("0.12 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s2", culture));
            Assert.Equal("0.123 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s3", culture));
            Assert.Equal("0.1235 m².°C/kW", new ThermalInsulance(0.123456, ThermalInsulanceUnit.SquareMeterCelciusDegreePerKilowatt).ToString("s4", culture));
        }

        #pragma warning disable 612, 618

        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }

        #pragma warning restore 612, 618

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(ThermalInsulance)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(ThermalInsulanceUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(QuantityType.ThermalInsulance, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(ThermalInsulance.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(1.0);
            Assert.Equal(new {ThermalInsulance.QuantityType, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(value);
            Assert.Equal(ThermalInsulance.FromSquareMeterCelciusDegreePerKilowatts(-value), -quantity);
        }

    }
}
